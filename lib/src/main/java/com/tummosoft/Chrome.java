/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.tummosoft;

import anywheresoftware.b4a.BA;
import anywheresoftware.b4a.BA.*;
import anywheresoftware.b4a.objects.streams.File;
import anywheresoftware.b4a.BA.Events;
import anywheresoftware.b4a.BA.ShortName;
import anywheresoftware.b4a.BA.Version;
import anywheresoftware.b4a.keywords.Regex;
import anywheresoftware.b4j.objects.FxBA;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.List;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.Cookie;
import org.openqa.selenium.Keys;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.touch.TouchActions;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.support.events.EventFiringWebDriver;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.StringSelection;
/**
 *
 * @author hienh
 */
@Version(2.01f)
@ShortName("Chrome")
@DontInheritEvents
//@DependsOn(values={"some java library "})
//@ActivityObject
// Giai thich
@Events(values={"PageFinished (error as String, success as Boolean)",
"AfterClickOn ()", "BeforeClickOn()", "BeforeAlertAccept()", "AfterAlertAccept()", "BeforeAlertDismiss()", "AfterAlertDismiss()", "AfterNavigateTo(url as String)", "BeforeNavigateTo(url as String)",
"AfterNavigateBack(url As String)", "BeforeNavigateBack(url As String)", "BeforeNavigateForward(url As String)", "AfterNavigateForward(url As String)", "AfterNavigateRefresh(url As String)", "BeforeNavigateRefresh(url As String)",
"AfterFindBy()", "BeforeFindBy()", "AfterChangeValueOf(keysToSend As String)","BeforeChangeValueOf(keysToSend As String)", "BeforeScript(script As String)","AfterScript(script As String)", "BeforeSwitchToWindow(windowName As String)",
"AfterSwitchToWindow(windowName As String)", "OnException(throwable As String)", "BeforeGetScreenshotAs()", "AfterGetScreenshotAs()",
"BeforeGetText(value As String)", "AfterGetText(value As String)"})

public class Chrome {
     private String chromedriverPath;
     WebDriver Chromedriver;
     EventFiringWebDriver driver;
     private String eventPageFinish;
     private Boolean success = false;
     private String Err = "";
     private BA baEvent;
     int mYears = 2025;
     int mMonths = 12;
     int mDays = 1;
     private int mpageTimeout;
     private String mUserAgent = "";
     private String mHTTPProxy = "";
     String mSockProxy = "";
     int mSockVersion = 0;
     String mSockUser = "";
     String mSockPass = "";
     Boolean mHideAutomation = false;
     String mProfile = "";
     TouchActions action;
     String rootBA;
     String [] mArgument = null;
     ChromeOptions options = new ChromeOptions();
     
    public void Create() {
        
        if (mArgument.length > 0) {
            for (int i=0; i < mArgument.length; i++) {
                options.addArguments(mArgument[i]);
            }       
        }
        
        // ImmutableSet.Builder<CapabilitiesFilter> adapters = ImmutableSet.builder();
        //ServiceLoader.load(CapabilitiesFilter.class).forEach(adapters::add);
        //adapters.add(new ChromeFilter());
        //this.adapters = adapters.build();

        //ImmutableSet.Builder<CapabilityTransform> transforms = ImmutableSet.builder();
       // ServiceLoader.load(CapabilityTransform.class).forEach(transforms::add);
        //transforms.add(new ProxyTransform()).add(new StripAnyPlatform()).add(new W3CPlatformNameNormaliser());
        //this.transforms = transforms.build();
        //FxBA form = null;
         
        Chromedriver = new ChromeDriver(options);
        driver = new EventFiringWebDriver(Chromedriver);
        jSeleniumEventHandler eventsHanlder = new jSeleniumEventHandler(baEvent, rootBA);
        driver.register(eventsHanlder);   
        
        //var10000.reload();
    }
    
    public anywheresoftware.b4a.objects.collections.List GetTabs() {
        anywheresoftware.b4a.objects.collections.List temp = new anywheresoftware.b4a.objects.collections.List();
        temp.Initialize();
        String winHandleBefore = driver.getWindowHandle();

        for(String winHandle : driver.getWindowHandles()){
            temp.Add(winHandle);
        }
        return temp;
    }
    
    public void AddArgument(String [] arg) {
        mArgument = arg;
    }
    
    public void SwitchTab2(String tabName) {
        driver.switchTo().window(tabName);        
    }
    
    public void Initialize(final BA ba, String Event, String Dir, String DriverFile) {        
        chromedriverPath = File.Combine(Dir, DriverFile);
        System.setProperty("webdriver.chrome.driver", chromedriverPath);
        eventPageFinish = Event + "_PageFinished";
        eventPageFinish = eventPageFinish.toLowerCase(BA.cul);
        baEvent = ba;
        rootBA = Event;
    } 
    
    public void PageTimeout(int seconds) {
        mpageTimeout = seconds;
    }
    
    public void CreateAction() {
        action = new TouchActions(driver);        
    }
    
    public void ActionClick() {
        action.click();           
    }
    
    public void Back() {
        driver.navigate().back();        
    }
    
    public void Forward() {
        driver.navigate().forward();        
    }
    
    public void Refresh() {
        driver.get(driver.getCurrentUrl());
    }
    
    public void takeSnapShot(String Dir, String FileName) {
        TakesScreenshot scrShot =((TakesScreenshot)driver);
        java.io.File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);
        String f1 = SrcFile.getPath();
         try {
             File.Copy(f1, "", Dir, FileName);           
         } catch (IOException ex) {
             Logger.getLogger(Chrome.class.getName()).log(Level.SEVERE, null, ex);
         }
    }
    
    public void SwithToFrameID(int id) {
       driver.switchTo().frame(id);
    }
   
     public void SendClick(String element, String ByProperties) {
         String prop = ByProperties.toLowerCase();
         try {
            if (prop.contains("classname")) {
               driver.findElement(By.className(element)).click();
            } else if (prop.contains("id")) {
               driver.findElement(By.id(element)).click();
            } else if (prop.contains("cssselector")) {
               driver.findElement(By.cssSelector(element)).click();
            } else if (prop.contains("xpath")) {
               driver.findElement(By.xpath(element)).click();
            } else if (prop.contains("linktext")) {
               driver.findElement(By.linkText(element)).click();
            } else if (prop.contains("name")) {
               driver.findElement(By.name(element)).click();
            } else if (prop.contains("partiallinktext")) {
               driver.findElement(By.partialLinkText(element)).click();
            } else if (prop.contains("tagname")) {
               driver.findElement(By.tagName(element)).click();
            }             
         } catch (Exception ex) {
            BA.LogError(ex.toString());
         }        
     }
     
      public void SendKey(String element, String keyInput, String ByProperties) {        
       CharSequence jKey = convertKey(keyInput);
                 
       String it = element.substring(1);      
       String prop = ByProperties.toLowerCase();
         try {
            if (prop.contains("classname")) {
               driver.findElement(By.className(element)).sendKeys(jKey);
            } else if (prop.contains("id")) {
               driver.findElement(By.id(element)).sendKeys(jKey);
            } else if (prop.contains("cssselector")) {
               driver.findElement(By.cssSelector(element)).sendKeys(jKey);
            } else if (prop.contains("xpath")) {
               driver.findElement(By.xpath(element)).sendKeys(jKey);
            } else if (prop.contains("linktext")) {
               driver.findElement(By.linkText(element)).sendKeys(jKey);
            } else if (prop.contains("name")) {
               driver.findElement(By.name(element)).sendKeys(jKey);
            } else if (prop.contains("partiallinktext")) {
               driver.findElement(By.partialLinkText(element)).sendKeys(jKey);
            } else if (prop.contains("tagname")) {
               driver.findElement(By.tagName(element)).sendKeys(jKey);
            }             
         } catch (Exception ex) {
            BA.LogError(ex.toString());
         }  
    }
    
    public void SwitchToIFrame(String element, String ByProperties) {
        String prop = ByProperties.toLowerCase();
        try {
           // driver.switchTo().frame
           if (prop.contains("classname")) {
               driver.switchTo().frame( driver.findElement(By.className(element)) );
           } else if (prop.contains("id")) {
               driver.switchTo().frame( driver.findElement(By.id(element)) );
           } else if (prop.contains("cssselector")) {
               driver.switchTo().frame( driver.findElement(By.cssSelector(element)) );
           } else if (prop.contains("xpath")) {
              driver.switchTo().frame( driver.findElement(By.xpath(element)) );
           } else if (prop.contains("linktext")) {
               driver.switchTo().frame( driver.findElement(By.linkText(element)) );
           } else if (prop.contains("name")) {
               driver.switchTo().frame( driver.findElement(By.name(element)) );
           } else if (prop.contains("partiallinktext")) {
               driver.switchTo().frame( driver.findElement(By.partialLinkText(element)) );
           } else if (prop.contains("tagname")) {
               driver.switchTo().frame( driver.findElement(By.tagName(element)) );
           }           
        } catch (Exception ex) {
           BA.LogError(ex.toString());
        }
     
    }

   public void SwitchtoDefault() {
       driver.switchTo().defaultContent();     
   }

   public void SendMultipleKeys(String element, String keyInput, String ByProperties) {        
       keyInput = keyInput.toLowerCase();             
       String prop = ByProperties.toLowerCase();
       org.openqa.selenium.Keys key;
       String [] arr = Regex.Split("\\+", keyInput);
       String jKey = new String();
       
       int i;
       for (i=0; i < arr.length; i++) {
           //BA.Log("Length: " + arr[i]);
            if (arr[i].contains("ctrl")) {
                jKey = jKey + Keys.CONTROL;
            } else if (arr[i].contains("alt")) {
                jKey = jKey + Keys.ALT;
            } else if (arr[i].contains("shift")) {
                jKey = jKey + Keys.SHIFT;
            } else if (arr[i].contains("space")) {
                jKey = jKey + Keys.SPACE;
            } else if (arr[i].contains("back_space")) {
                jKey = jKey + Keys.BACK_SPACE;
            } else if (arr[i].contains("arrow_left")) {
                jKey = jKey + Keys.ARROW_LEFT;
            } else if (arr[i].contains("arrow_right")) {
                jKey = jKey + Keys.ARROW_DOWN;
            } else if (arr[i].contains("arrow_up")) {
                jKey = jKey + Keys.ARROW_UP;
            } else if (arr[i].contains("arrow_down")) {
                jKey = jKey + Keys.ARROW_DOWN;
            } else if (arr[i].contains("a")) {
                jKey = jKey + "a";
            } else if (arr[i].contains("v")) {
                jKey = jKey + "v";
            } else if (arr[i].contains("x")) {
                jKey = jKey + "x";
            } else {
                jKey = jKey + arr[i].trim();
            }
       }
        
         try {
            if (prop.contains("classname")) {                
               driver.findElement(By.className(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("id")) {
               driver.findElement(By.id(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("cssselector")) {
               driver.findElement(By.cssSelector(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("xpath")) {
               driver.findElement(By.xpath(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("linktext")) {
               driver.findElement(By.linkText(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("name")) {
               driver.findElement(By.name(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("partiallinktext")) {
               driver.findElement(By.partialLinkText(element)).sendKeys(Keys.chord(jKey));
            } else if (prop.contains("tagname")) {
               driver.findElement(By.tagName(element)).sendKeys(Keys.chord(jKey));
            }             
         } catch (Exception ex) {
            BA.LogError(ex.toString());
         }  
    }
      
  public void SelectElement(String element, String ByProperties) {
       String prop = ByProperties.toLowerCase();
         try {
            if (prop.contains("classname")) {
               driver.findElement(By.className(element));
            } else if (prop.contains("id")) {
               driver.findElement(By.id(element));
            } else if (prop.contains("cssselector")) {
               driver.findElement(By.cssSelector(element));
            } else if (prop.contains("xpath")) {
               driver.findElement(By.xpath(element));
            } else if (prop.contains("linktext")) {
               driver.findElement(By.linkText(element));
            } else if (prop.contains("name")) {
               driver.findElement(By.name(element));
            } else if (prop.contains("partiallinktext")) {
               driver.findElement(By.partialLinkText(element));
            } else if (prop.contains("tagname")) {
               driver.findElement(By.tagName(element));
            }             
         } catch (Exception ex) {
            BA.LogError(ex.toString());
         }  
    }
      
    public void SendImageToClipboard(String Dir, String FileName) {
        String loadFile = File.Combine(Dir, FileName);
        java.io.File files = new java.io.File(loadFile);
        List listOfFiles = new ArrayList();
        listOfFiles.add(files);

        jClipboard ft = new jClipboard(listOfFiles);

        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ft, new ClipboardOwner() {
            @Override
            public void lostOwnership(Clipboard clipboard, Transferable contents) {
                //System.out.println("Lost ownership");
            }
        });
    }
      
    public void SendTextToClipboard(String input) {       
        StringSelection stringSelection = new StringSelection(input);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }

    public void SendText(String element, String text, String ByProperties) {        
       String prop = ByProperties.toLowerCase();
         try {
            if (prop.contains("classname")) {
               driver.findElement(By.className(element)).sendKeys(text);
            } else if (prop.contains("id")) {
               driver.findElement(By.id(element)).sendKeys(text);
            } else if (prop.contains("cssselector")) {
               driver.findElement(By.cssSelector(element)).sendKeys(text);
            } else if (prop.contains("xpath")) {
               driver.findElement(By.xpath(element)).sendKeys(text);
            } else if (prop.contains("linktext")) {
               driver.findElement(By.linkText(element)).sendKeys(text);
            } else if (prop.contains("name")) {
               driver.findElement(By.name(element)).sendKeys(text);
            } else if (prop.contains("partiallinktext")) {
               driver.findElement(By.partialLinkText(element)).sendKeys(text);
            } else if (prop.contains("tagname")) {
               driver.findElement(By.tagName(element)).sendKeys(text);
            }             
         } catch (Exception ex) {
            BA.LogError(ex.toString());
         }  
    }
     
     public Boolean FindElement(String element, String ByProperties) {
         Boolean rs = false;
         String prop = ByProperties.toLowerCase();
         try {
            if (prop.contains("classname")) {
                rs = driver.findElement(By.className(element)).isEnabled();
            } else if (prop.contains("id")) {
                rs = driver.findElement(By.id(element)).isEnabled();
            } else if (prop.contains("cssselector")) {
                rs = driver.findElement(By.cssSelector(element)).isEnabled();
            } else if (prop.contains("xpath")) {
                rs = driver.findElement(By.xpath(element)).isEnabled();
            } else if (prop.contains("linktext")) {
                rs = driver.findElement(By.linkText(element)).isEnabled();
            } else if (prop.contains("name")) {
                rs = driver.findElement(By.name(element)).isEnabled();
            } else if (prop.contains("partiallinktext")) {
                rs = driver.findElement(By.partialLinkText(element)).isEnabled();
            } else if (prop.contains("tagname")) {
                rs = driver.findElement(By.tagName(element)).isEnabled();
            }             
         } catch (Exception ex) {
            rs = false;
         }
        return rs;
     }
    
    public int GetScreenWidth() {
         Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
         int screenWidth = (int) screenDimension.getWidth();         
         return screenWidth;
    }
     
    public int GetScreenHeight() {
         Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();
         int screenHeight = (int) screenDimension.getHeight();
         return screenHeight;
    }
        
    public Boolean CapchaAutoClick() {
        String framename = driver.findElement(By.tagName("iframe")).getAttribute("name");
        driver.switchTo().frame(framename);
        Boolean fid = driver.findElement(By.xpath("//span[@id='recaptcha-anchor']")).isEnabled();
        if (fid == true) {
            driver.findElement(By.xpath("//span[@id='recaptcha-anchor']")).click();
        }            
        return fid;
    }
           
    public void ProfilePath(String Dir) {
        mProfile = Dir;
    }
    
    public void HideAutomation(Boolean value) {
        mHideAutomation = value;
    }
    
    public void SetHTTPProxy(String proxy) {
        mHTTPProxy = proxy;
    }
    
    public void SetSockProxy(String proxy, String user, String pass, int version) {
        mSockProxy = proxy;
        mSockVersion = version;
        mSockUser = user;
        mSockPass = pass;                
    }
    
    public void LoadUrl(String url) {
         driver.manage().timeouts().implicitlyWait(mpageTimeout, TimeUnit.SECONDS);         
        try {
            driver.get(url);
            success = true;
        }
        catch(Exception e) {
            Err = e.toString();      
            success = false;            
        }    
        
       PageEventFinish(Err, success);
    }
    
    public void Stop() {
        driver.quit();
    }
    
    public String GetCurrentUrl() {
        return driver.getCurrentUrl();        
    }
    
    public String GetTitle() {
        return driver.getTitle();        
    }
    
    public void SetCookiesExpiresOn(int Years, int Months,int Days) {
        mYears = Years;
        mMonths = Months;
        mDays = Days;
    }
    
    public void SetUserAgent(String value) {                
        mUserAgent = value;
    }
    
    public void ReadCookies(String Dir, String FileName) {
       String f1 = File.Combine(Dir, FileName);
        try{
            java.io.File file = new java.io.File(f1);							
            java.io.FileReader fileReader = new java.io.FileReader(file);							
            java.io.BufferedReader Buffreader = new java.io.BufferedReader(fileReader);							
            String strline;			
            while((strline=Buffreader.readLine())!=null){									
                StringTokenizer token = new StringTokenizer(strline,";");									
                while(token.hasMoreTokens()){					
                    String name = token.nextToken();					
                    String value = token.nextToken();					
                    String domain = token.nextToken();					
                    String path = token.nextToken();					
                    String expiry = token.nextToken();
                    Boolean isSecure = new Boolean(token.nextToken()).booleanValue();        
		        
                    Cookie cookie = new Cookie.Builder(name, value)
                    .domain(domain)
                    .expiresOn(new java.util.Date(mYears, mMonths, mDays))
                    .isHttpOnly(true)
                    .isSecure(false)
                    .path(path)
                    .build();

                    driver.manage().addCookie(cookie);
                }		
            }		
        }catch(Exception ex){					
            BA.Log("Err:" + ex.getMessage());            			
        }          
    }
    
    public String GetPageSource() {
        return driver.getPageSource();
    }
    
    public void ExecuteScript(String script) {
        ((JavascriptExecutor)driver).executeScript(script);
    }
    
    public String ExecuteAsyncScript(String script) {
        if (driver instanceof JavascriptExecutor)
            return (String) ((JavascriptExecutor) driver).executeAsyncScript(script, "").toString();
        return null;
    }
    
    public anywheresoftware.b4a.objects.collections.List GetAllLink() {
        anywheresoftware.b4a.objects.collections.List rs = new anywheresoftware.b4a.objects.collections.List();
        rs.Initialize();
       List <WebElement> element = driver.findElements(By.xpath("//a[@href]"));
       element.forEach((ele) -> {
            rs.Add(ele.getAttribute("href"));
        });        
       return rs;
    }
    
    public void Scroll(int x, int y) {
        String js = "window.scrollTo(" + x + ", " + y + ")";
        ((JavascriptExecutor)driver).executeScript(js);        
    }
    
    public long PageYOffset() {
        if (driver instanceof JavascriptExecutor)
            return (long) ((JavascriptExecutor) driver).executeAsyncScript(""
                    + "function FindOffset() {"
                    + "var rs;"
                    + "rs = window.pageYOffset;"                    
                    + "return rs;}"
                    + "var callback = arguments[arguments.length - 1];"
                    + "callback(FindOffset());", "");
        return 0;
    }
    
    public long PageXOffset() {
         if (driver instanceof JavascriptExecutor)
            return (long) ((JavascriptExecutor) driver).executeAsyncScript(""
                    + "function FindOffset() {"
                    + "var rs;"
                    + "rs = window.pageXOffset;"
                    + "return rs;}"
                    + "var callback = arguments[arguments.length - 1];"
                    + "callback(FindOffset());", "");
        return 0;
    }
    
    public int Length() {
         ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
         return tabs.size();
    }
    
    public void SwitchTab(int toTab) {
        ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
        driver.switchTo().window(tabs.get(toTab));
    }
    
    public void Maximize(Boolean max) {
        if (max == true) { 
            driver.manage().window().maximize();
        }
    }
        
    public void OpenNewTab() {
       ((JavascriptExecutor)driver).executeScript("window.open('about:blank', '-blank')");
    }
            
    public anywheresoftware.b4a.objects.collections.List GetAllCookies() {     
        anywheresoftware.b4a.objects.collections.List temp = new anywheresoftware.b4a.objects.collections.List();
        temp.Initialize();
        try		
        {	  
            
            for(Cookie ck : driver.manage().getCookies())							
            {			
                temp.Add((ck.getName()+";"+ck.getValue()+";"+ck.getDomain()+";"+ck.getPath()+";"+ck.getExpiry()+";"+ck.isSecure()));                
            }
        }
        catch(Exception ex)				
        {		
            ex.printStackTrace();			
        }  
        return temp;
    }
    
    @Hide       
    //raised on another thread than the OwnersThread        
    public void PageEventFinish(String error, Boolean success) {  
     if (baEvent.subExists(eventPageFinish)) {
           baEvent.raiseEvent(this, eventPageFinish, error, success);          
         } else {
            BA.LogError("event sub does not exist: " + this.eventPageFinish);
         }
    }    
    
    public void Close() {
        driver.close();        
    }
    
    private CharSequence convertKey(String key) {
        CharSequence jKey = null;
        switch(key.toLowerCase()) {
            case "enter":
              jKey = Keys.ENTER;
              break;
            case "tab":
              jKey = Keys.TAB;
              break;            
            case "arrow_down":
               jKey = Keys.ARROW_DOWN ;
              break;            
            case "arrow_left":
               jKey = Keys.ARROW_LEFT;
              break;            
            case "arrow_right":
               jKey = Keys.ARROW_RIGHT;
              break;         
            case "arrow_up":
               jKey = Keys.ARROW_UP;
              break;      
            case "space":
               jKey = Keys.SPACE;
              break;   
            case "back_space":
               jKey = Keys.BACK_SPACE;
              break;   
            case "delete":
               jKey = Keys.DELETE;
              break;   
            case "clear":
               jKey = Keys.CLEAR;
              break;               
          }      
        return jKey;
    }   
    
    
}

